#include <iostream>

using namespace std;

int main()
{
  double A, x, b, f, max, temp;
  int N, M, i,j, maxRow;
  i = 0;
  j = 0;
  A[][]=[N][M];
  x[] = [N];
  b[] = [N]
  cout<<"Size of solution?"<<endl;
  cin>>N;
  M = N+1;
  ///convert matrix A to upper triangular/forward elimination
  while(i<=N && j<=M)
  {
      ///Search for max in current column
      max = A[i][i];
      for(int row = i; row<n; row++)
      {
          if(fabs(A[row][i])>max)
          {
              max = A[row][i];
              maxRow = row;
          }
      }
      ///Swap current row with max row
      for(int col = i; col<M; col++)
      {
          temp = A[i][col];
          A[i][col]=A[maxRow][col];
          A[maxRow][col] = temp;
      }
      for(int k = i+1; k<N; k++)
      {
          f = A[k][j]/A[i][j];
          A[k][j] = 0.0;
          for(int l = j+1; i<M; i++)
          {
              A[k][l] = A[k][l] - A[i][l]*f;
          }
      }
       i = i+1;
       j = j+1;
  }
  
  
}
